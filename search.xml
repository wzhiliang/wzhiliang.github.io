<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>高性能JavaScript</title>
    <url>/2020/11/13/book-notes/</url>
    <content><![CDATA[<h2 id="第1章-加载和运行"><a href="#第1章-加载和运行" class="headerlink" title="第1章  加载和运行"></a>第1章  加载和运行</h2><blockquote>
<p>管理浏览器中的JavaScript代码是个棘手的问题，因为代码执行过程会阻塞浏览器的其他进程，比如用户界面绘制。每次遇到 &lt; script &gt;标签，页面都必须停下来等待代码下载（如果是外链文件）并执行，然后继续处理其他部分。尽管如此，还是有几种方法能减少JavaScript对性能的影响：</p>
</blockquote>
<ul>
<li>&lt;/ body&gt;闭合标签之前，将所有的&lt; script&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成渲染。</li>
<li>合并脚本。页面中的&lt; script&gt;标签越少，加载也就越快，响应也更迅速。无论外链文件还是内嵌脚本都是如此。</li>
<li>有多种无阻塞下载JavaScript的办法：<ul>
<li>使用&lt; script&gt;标签的defer属性；</li>
<li>使用动态创建&lt; script&gt;元素来下载并执行代码；</li>
<li>使用XHR对象下载JavaScript代码并注入页面中；</li>
</ul>
</li>
</ul>
<p>通过以上策略，可以极大提高那些需要使用大量JavaScript的Web应用的实际性能。</p>
<h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><p>推荐书籍：<br>《高性能网站建设》<br>《高性能网站建设进阶指南》  </p>
<p>推荐代码仓：<br>YUI3、LazyLoad、LABjs  </p>
<blockquote>
<p>这些代码仓可以学习下思想，分析下优劣，实际项目中不一定要使用</p>
</blockquote>
<h2 id="第2章-数据存取"><a href="#第2章-数据存取" class="headerlink" title="第2章  数据存取"></a>第2章  数据存取</h2><blockquote>
<p>在JavaScript中，数据存储的位置会对代码整体性能产生重大的影响。数据存储共有4种方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。</p>
</blockquote>
<ul>
<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>
<li>由于局部变量存在于作用域的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域链中的位置越深，访问所需时间就越长。由于全局变量总处在作用域链的最末端，因此访问速度也是最慢的。</li>
<li>避免使用with语句，因为它会改变执行环境作用域链。同样，try-catch语句中的catch子句也有同样的影响，因此也要小心使用。</li>
<li>嵌套的对象成员会明显影响性能，尽量少用。</li>
<li>属性或方法在原型链中的位置越深，访问它的速度也越慢。</li>
<li>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善JavaScript性能，因为局部变量访问速度最快。</li>
</ul>
<blockquote>
<p>通过以上策略，你可以显著提升那些需要使用大量JavaScript的Web应用的实际性能。</p>
</blockquote>
<h2 id="第3章-DOM编程"><a href="#第3章-DOM编程" class="headerlink" title="第3章  DOM编程"></a>第3章  DOM编程</h2><blockquote>
<p>访问和操作DOM是现代Web应用的重要部分。但每次穿越链接ECMAScript和DOM连个岛屿之间的桥梁，都会被收取“过桥费”。为了减少DOM编程带来的性能损失，请记住以下几点：</p>
</blockquote>
<ul>
<li>最小化DOM访问次数，尽可能在JavaScript端处理。</li>
<li>如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。</li>
<li>小心处理HTML集合，因为它是实时连系着底层文档。把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它拷贝到一个数组中。</li>
<li>如果可能的话，使用速度更快的API，比如querySelectorAll()和firstElementChild。</li>
<li>要留意重排和重绘：批量修改样式时，“离线”操作DOM树，使用缓存，并减少访问布局信息的次数。</li>
<li>动画中使用绝对定位，使用拖放代理。</li>
<li>使用事件委托来减少事件处理器的数量。</li>
</ul>
<h2 id="第4章-算法和流程控制"><a href="#第4章-算法和流程控制" class="headerlink" title="第4章  算法和流程控制"></a>第4章  算法和流程控制</h2><blockquote>
<p>JavaScript和其他编程语言一样，代码的写法和算法会影响运行时间。与其他语言不同的是JavaScript可用资源有限，因此优化技术更为重要。</p>
</blockquote>
<ul>
<li>for、while和do-while循环性能特性相当，并没有一种循环明显快于或慢于其他类型。</li>
<li>避免使用for-in循环，除非你需要遍历一个属性数量未知的对象。</li>
<li>改善循环性能的最佳方式是减少每次迭代的运算量和减少循环迭代次数。</li>
<li>通常来说，switch总是比if-else快，但并不总是最佳解决方案。</li>
<li>在判断条件较多时，使用查找表比if-else和switch更快。</li>
<li>浏览器的调用栈大小限制了递归算法在JavaScript中的应用；栈溢出错误会导致其他代码中断运行。</li>
<li>如果你遇到栈溢出错误，可将方法改为迭代算法，或使用Memoization来避免重复计算。  </li>
</ul>
<p>运行的代码熟练越大，使用这些策略所带来的性能提升也就越明显。</p>
<h2 id="第5章-字符串和正则表达式"><a href="#第5章-字符串和正则表达式" class="headerlink" title="第5章  字符串和正则表达式"></a>第5章  字符串和正则表达式</h2><blockquote>
<p>密集的字符串操作和草率地编写正则表达式可能产生严重的性能障碍，本章提供的建议会帮助你避免这些常见的陷阱。</p>
</blockquote>
<ul>
<li>当连接数量巨大或者尺寸巨大的字符串时，数组项合并是唯一在IE 7及更早版本中性能合理的方法。</li>
<li>如果不需要考虑IE 7及更早版本的性能，数组项合并是最慢的字符串连接方法之一。推荐使用简单的+和+=操作符替代，避免不必要的中间字符串。</li>
<li>回溯既是正则表达式匹配功能的基本组成部分，也是正则表达式的低效之源。</li>
<li>回溯失控发生在正则表达式本应快速匹配的地方，但因为某些特殊的字符串匹配动作导致运行缓慢甚至浏览器崩溃。避免这个问题的办法是：使相邻的字元互斥，避免嵌套量词对同一字符串的相同部分多次匹配，通过重复利用预查的原子组去除不必要的回溯。</li>
<li>提高正则表达式效率的各种技术手段会有助于正则表达式更快地匹配，并在非匹配位置上花更少时间。</li>
<li>正则表达式并不总是完成工作的最佳工具，尤其当你只搜索字面字符串的时候。</li>
<li>尽管有许多方法可以去除字符串的首尾空白，但使用两个简单的正则表达式（一个用来去除头部空白，另一个用来去除尾部空白）来处理大量字符串内容能提供一个简洁而跨浏览器的方法。从字符串末尾开始循环向前搜索第一个非空字符，或者将此技术同正则表达式结合起来，会提供一个更好的替代方案，它很少受到字符串长度影响。</li>
</ul>
<h2 id="第6章-快速响应的用户界面"><a href="#第6章-快速响应的用户界面" class="headerlink" title="第6章  快速响应的用户界面"></a>第6章  快速响应的用户界面</h2><blockquote>
<p>JavaScript和用户界面更新在同一个进程中运行，因此一次只能处理一件事情。这意味着当JavaScript代码正在运行时，用户界面不能响应输入，反之亦然。高效地管理UI线程就是要确保JavaScript不能运行太长时间，以免影响用户体验。最后，请牢记以下几点：</p>
</blockquote>
<ul>
<li>任何JavaScript任务都不应当执行超过100毫秒。过长的运行时间会导致UI更新出现明显的延迟，从而对用户体验产生负面影响。</li>
<li>JavaScript运行期间，浏览器响应用户交互的行为存在差异。无论如何，JavaScript长时间运行将导致用户体验变得混乱和脱节。</li>
<li>定时器可用来安排代码延迟执行，它使得你可以把长时间运行脚本分解成一系列的小任务。</li>
<li>Web Workers是新版浏览器支持的特性，它允许你在UI线程外部执行JavaScript代码，从而避免锁定UI。</li>
</ul>
<p>Web应用越复杂，积极主动地管理UI线程就越重要。即使JavaScript代码再重要，也不应该影响用户体验。</p>
<h2 id="第7章-Ajax"><a href="#第7章-Ajax" class="headerlink" title="第7章 Ajax"></a>第7章 Ajax</h2><blockquote>
<p>高性能的Ajax包括以下方面：了解你项目的具体需求，选择正确的数据格式和与之匹配的传输技术。</p>
</blockquote>
<blockquote>
<p>作为数据格式，纯文本和HTML只适合特定场合，但它们可以节省客户端的CPU周期。XML被广泛应用而且支持良好，但是它十分笨重且解析缓慢。JSON是轻量级的，解析速度快（被视为原生代码而不是字符串），通用性与XML相当。字符分隔的自定义格式十分轻量，在解析大量数据集时非常快，但需要编写额外的服务端构造程序，并在客户端解析。</p>
</blockquote>
<blockquote>
<p>当从页面当前所处的域下请求数据时，XHR提供了最完善的控制和灵活性，尽管它会把接收到的所有数据当成一个字符串，且这有可能降低解析速度。另一方面，动态脚本注入允许跨域请求和本地执行JavaScript和JSON但是它的接口不那么安全，而且还不能读取头信息或响应代码。Muiltipart XHR可以用来减少请求数，并处理一个响应中的各种文件类型，但是它不能缓存接收的响应。当需要发送数据时，图片信标是一种简单而有效的方法。XHR还可以用POST方法发送大量数据。</p>
</blockquote>
<p>除了这些格式和传输技术，还有一些准则有助于加速你的Ajax：</p>
<ul>
<li>减少请求数，可通过合并JavaScript和CSS文件，或使用MXHR。</li>
<li>缩短页面的加载时间，页面主要内容加载完成后，用Ajax获取那些次要的文件。</li>
<li>确保你的代码错误不会输出给用户，并在服务端处理错误。</li>
<li>知道何时使用成熟的Ajax类库，以及何时编写自己的底层Ajax代码。</li>
</ul>
<h2 id="第8章-编程实践"><a href="#第8章-编程实践" class="headerlink" title="第8章  编程实践"></a>第8章  编程实践</h2><blockquote>
<p>JavaScript提出了一些独一无二的性能挑战，这与你组织代码的方式有关。随着Web应用变得越来越高级，包含的JavaScript代码也越来越多，各种模式和反模式也逐渐出现。为了编写更高效的代码，请牢记以下编程实践：</p>
</blockquote>
<ul>
<li>通过避免使用eval()和Function()构造器来避免双重求值带来的性能消耗。同样的，给setTimeout()和setInterval()传递函数而不是字符串作为参数。</li>
<li>尽量使用直接量创建对象和数组。直接量的创建和初始化都比非直接量形式要快。</li>
<li>避免做重复的工作。当需要检测浏览器时，可使用延迟加载或条件预加载。</li>
<li>在进行数学计算时，考虑使用直接操作数字的二进制形式的位运算。</li>
<li>JavaScript的原生方法总会比你写的任何代码都要快。尽量使用原生方法。</li>
</ul>
<h2 id="第9章-构建并部署高性能JavaScript应用"><a href="#第9章-构建并部署高性能JavaScript应用" class="headerlink" title="第9章  构建并部署高性能JavaScript应用"></a>第9章  构建并部署高性能JavaScript应用</h2><blockquote>
<p>构建和部署的过程对基于JavaScript的Web应用的性能有着巨大影响。这个过程最重要的步骤有：</p>
</blockquote>
<ul>
<li>合并JavaScript文件以减少HTTP请求数。</li>
<li>使用YUI Compressor压缩JavaScript文件。</li>
<li>在服务器压缩JavaScript文件（Gzip编码）。</li>
<li>通过正确设置HTTP响应头来缓存JavaScript文件，通过向文件名增加时间戳来避免缓存问题。</li>
<li>使用CDN（Content Delivery Network）提供JavaScript文件；CDN不仅可以提升性能，它也为你管理文件的压缩与缓存。</li>
</ul>
<p>所有这些步骤都应该自动化处理，可以使用公开的工具，比如Apache Ant，也可以使用定制的工具来满足你的特定需求。如果你使得构建过程工作起来，你将会显著提高那些依赖大量JAvaScript的Web应用或网站的性能。</p>
<h2 id="第10章-工具"><a href="#第10章-工具" class="headerlink" title="第10章  工具"></a>第10章  工具</h2><blockquote>
<p>当网页或Web应用变慢时，分析从网络下载的资源以及分析脚本的运行性能能让你专注于那些最需要优化的地方。</p>
</blockquote>
<ul>
<li>使用网络分析工具找出加载脚本和页面中其他资源的瓶颈，这会帮助你决定哪些脚本需要延迟加载，或者需要进一步分析。</li>
<li>尽管传统的经验告诉我们要尽量减少HTTP请求数，但把脚本尽可能延迟加载可以加快页面的渲染速度，给用户带来更好的体验。</li>
<li>使用性能分析工具找出脚本运行过程中速度慢的地方，检查每个函数所消耗的时间，以及函数被调用的次数，通过调用栈自身提供的一些线索来找出需要集中精力优化的地方。</li>
<li>尽管耗费的时间和调用次数通常是数据中最有价值的地方，但仔细观察函数的调用过程，你也许会发现其他优化目标。</li>
</ul>
<p>这些工具会帮助你深入了解你的代码在那些通常你比较陌生的编程环境下是如何运行的。在开始优化工作之前使用它们，以确保开发时间用在刀刃上。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
        <tag>笔记</tag>
        <tag>摘录</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建github个人博客</title>
    <url>/2020/11/08/hexo/</url>
    <content><![CDATA[<blockquote>
<p>我已经注册过github账号，这步就略过了，<a href="https://github.com/">github传送门</a></p>
</blockquote>
<h2 id="1-创建博客仓库"><a href="#1-创建博客仓库" class="headerlink" title="1. 创建博客仓库"></a>1. 创建博客仓库</h2><h3 id="1-1-登录github，点击右上角的加号，选择New-repository。"><a href="#1-1-登录github，点击右上角的加号，选择New-repository。" class="headerlink" title="1.1 登录github，点击右上角的加号，选择New repository。"></a>1.1 登录github，点击右上角的<em>加号</em>，选择<code>New repository</code>。</h3><p><img src="https://wzhiliang.github.io/images/blog/image-20201121225808694.png" alt="创建仓库"></p>
<h3 id="1-2-填写仓库的信息，Repository-name建议以用户名-github-io命名，其他的信息随意。"><a href="#1-2-填写仓库的信息，Repository-name建议以用户名-github-io命名，其他的信息随意。" class="headerlink" title="1.2 填写仓库的信息，Repository name建议以用户名+github.io命名，其他的信息随意。"></a>1.2 填写仓库的信息，Repository name建议以<code>用户名+github.io命名</code>，其他的信息随意。</h3><p><img src="https://wzhiliang.github.io/images/blog/image-20201121230117474.png" alt="填写信息"></p>
<h3 id="1-3-仓库信息填写完成，点击Create-repository按钮即可完成github个人博客仓库的创建。"><a href="#1-3-仓库信息填写完成，点击Create-repository按钮即可完成github个人博客仓库的创建。" class="headerlink" title="1.3 仓库信息填写完成，点击Create repository按钮即可完成github个人博客仓库的创建。"></a>1.3 仓库信息填写完成，点击Create repository按钮即可完成github个人博客仓库的创建。</h3><h3 id="1-4-个人博客仓库设置"><a href="#1-4-个人博客仓库设置" class="headerlink" title="1.4 个人博客仓库设置"></a>1.4 个人博客仓库设置</h3><p>settings配置页在最后一个tab页签</p>
<p><img src="https://wzhiliang.github.io/images/blog/image-20201122225331757.png" alt="image-20201122225331757"></p>
<p>将滚动条拖到<code>GitHub Pages</code>设置块，可设置项有<code>Source</code>、<code>Theme Chooser</code>、<code>Custom domain</code>、<code>Enforce HTTPS</code></p>
<p><img src="https://wzhiliang.github.io/images/blog/image-20201122230954257.png" alt="image-20201122230954257"></p>
<p>点击<code>Choose a theme</code> 进入到主题选择界面</p>
<p><img src="https://wzhiliang.github.io/images/blog/image-20201122231941689.png" alt="image-20201122231941689"></p>
<p>选择完主题，会调整到个人博客仓，目录结构如下：</p>
<p><img src="https://wzhiliang.github.io/images/blog/image-20201122232139859.png" alt="image-20201122232139859"></p>
<p><img src="https://wzhiliang.github.io/images/blog/image-20201122232356823.png" alt="image-20201122232356823"></p>
<p>这些配置都搞定了，过二十分钟左右即可访问个人的github博客主页。</p>
<h2 id="2-美化博客"><a href="#2-美化博客" class="headerlink" title="2. 美化博客"></a>2. 美化博客</h2><blockquote>
<p>默认的主题风格太单调，所以一般会引入三方的主题进行美化。</p>
</blockquote>
]]></content>
      <categories>
        <category>开源 建站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>个人博客</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Github的Markdown语法简明汇总</title>
    <url>/2020/11/09/github-markdown/</url>
    <content><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><h3 id="1-1-研究目的"><a href="#1-1-研究目的" class="headerlink" title="1.1 研究目的"></a>1.1 研究目的</h3><p>充分利用Markdown的特性创作出结构清晰、逻辑性强的技术博文，一来可以作为个人笔记以便不时之需，二来可以加强对Markdown的深入理解。</p>
<h3 id="1-2-Github"><a href="#1-2-Github" class="headerlink" title="1.2 Github"></a>1.2 Github</h3><p>Github作为全球最具影响力的程序员社区，汇集了全球顶尖程序员，孵化出种类繁多的程序、项目、产品。你可以在上面研究、学习各种源码，你可以创建自己的项目和博客。</p>
<p>Github中项目的说明文档、更新文档、Issue、Comment等模块都支持MarkDown，所以作为Github社区里的一员，有必要深入学习下MarkDown文本标记语言。</p>
<h3 id="1-3-Markdown"><a href="#1-3-Markdown" class="headerlink" title="1.3 Markdown"></a>1.3 Markdown</h3><p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML/HTML文档。  </p>
<p>Markdown格式化语法的首要设计目标是使其尽可能地可读。这个想法是，Markdown格式的文档应该以纯文本形式原样发布，而不会看起来像被标签或格式说明所标记。</p>
<p>MarkDown特性</p>
<ul>
<li><p>轻量级</p>
</li>
<li><p>易读易写</p>
</li>
<li><p>支持图片、图表、数学式等</p>
</li>
</ul>
<p>基于以上特性，现在很多主流的网站都广泛的使用Markdown来撰写版主文档等。</p>
<p>发展历程</p>
<ul>
<li>标准化：2016年3月发布了RFC 7763和RFC 7764。RFC 7763 从原始变体引入了MIME类型 text/markdown。RFC 7764讨论并注册了MultiMarkdown、GitHub Flavored Markdown (GFM)、Pandoc、CommonMark及Markdown等变体。</li>
<li>CommonMark：CommonMark发布了规范、参考实现和测试包的几个版本，并计划在2018年宣布最终的1.0规范和测试包。</li>
<li>GFM：2017年，GitHub发布了基于CommonMark的GitHub Flavored Markdown（GFM）的正式规范。</li>
<li>Markdown Extra：Markdown Extra是一种轻量级标记语言，基于在PHP（最初）、Python和Ruby中实现的Markdown。</li>
</ul>
<h3 id="1-4-Github的Markdown"><a href="#1-4-Github的Markdown" class="headerlink" title="1.4 Github的Markdown"></a>1.4 Github的Markdown</h3><p> GitHub结合了标准的MarkDown语法，加入Github风格的特性，称为GitHub Flavored MarkDown，具有一些独特的写作功能。</p>
<p>Github基于CommonMark Spec，是CommonMark的严格超集，形成带有Github风格的Markdown语法，称为Github Flavored Markdown，简称GFM。</p>
<p>除了表格、删除线、自动链接和任务列表被Github规范作为扩展添加外，GFM遵循CommonMark规范。GitHub还相应地更改了其站点上使用的解析器，这要求更改某些文档 - 例如，GFM现在要求创建标题的哈希符号由空格字符分隔。  </p>
<p>尽管GFM支持各种输入，但值得注意的是，在GFM转换为HTML之后，GitHub.com和GitHub Enterprise会执行其他后处理和清理操作，以确保网站的安全性和一致性。</p>
<h2 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h2><h3 id="2-1-CommonMark-语法"><a href="#2-1-CommonMark-语法" class="headerlink" title="2.1 CommonMark 语法"></a>2.1 CommonMark 语法</h3><p><img src="https://wzhiliang.github.io/images/commonmark.png" alt="CommonMark"></p>
<h3 id="2-2-GFM-语法"><a href="#2-2-GFM-语法" class="headerlink" title="2.2 GFM 语法"></a>2.2 GFM 语法</h3><table>
<thead>
<tr>
<th>Type</th>
<th>Grammar</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>标题</td>
<td><code>#/##/###/####/#####/###### </code></td>
<td>最多到六级标题</td>
</tr>
<tr>
<td>段落</td>
<td>回车换行</td>
<td>必须输入换行才能划分段落</td>
</tr>
<tr>
<td>文本块</td>
<td><code>文本块</code>  ```</td>
<td>用3个反引号包裹</td>
</tr>
<tr>
<td>文字高亮</td>
<td><code>文字高亮</code>  `</td>
<td>用1个反引号包裹</td>
</tr>
<tr>
<td>换行</td>
<td>文本后面补两个空格再按换行，或者两个文本直接加空行</td>
<td></td>
</tr>
<tr>
<td>斜体</td>
<td><code>*/_</code></td>
<td>用*或_包裹</td>
</tr>
<tr>
<td>粗体</td>
<td><code>**/__  </code></td>
<td>用**或__包裹</td>
</tr>
<tr>
<td>删除线</td>
<td><code>~~</code></td>
<td>用~~包裹</td>
</tr>
<tr>
<td>斜粗体</td>
<td><code>***/___</code></td>
<td>用***/___包裹</td>
</tr>
<tr>
<td>图片</td>
<td><code>![alt](URL title)</code></td>
<td>alt和title都可以省略，alt图片失败时替换文本；title鼠标悬停时显示文本；如果是仓库里的图片，直接使用相对路径</td>
</tr>
<tr>
<td>链接</td>
<td><code>[github](https://github.com)</code>/<code>[github][github]</code></td>
<td>第二种格式中url标识符可以复用；如果链接本仓库URL，写相对根目录的路径</td>
</tr>
<tr>
<td>图片链接</td>
<td><code>[![github-logo]][github]</code></td>
<td>图片本身和链接本身都支持URL标识符的形式，此时鼠标悬停时显示的文字是图片的title，而非链接本身的title了</td>
</tr>
<tr>
<td>锚点</td>
<td><code>[GoTo Top](#top)</code></td>
<td>标题中的英文字母都被转化为小写字母了。</td>
</tr>
<tr>
<td>无序列表</td>
<td><code>-</code></td>
<td>前面加-，后面跟一个空格；多级无序列表，下级列表的-比上级多缩进两个空格</td>
</tr>
<tr>
<td>有序列表</td>
<td><code>1. </code></td>
<td>数字后面加一个空格；多级有序列表跟无序列表一样</td>
</tr>
<tr>
<td>复选框列表</td>
<td><code>- [x] / - [ ]</code>  <code>+ [x]/+ [ ]</code> <code> * [x]/* [ ]</code></td>
<td>在无序列表符号后面加上[]或者[x]代表选中或者未选中情况</td>
</tr>
<tr>
<td>代码引用</td>
<td><code>json</code></td>
<td>用 ``` 用包裹</td>
</tr>
<tr>
<td>引用</td>
<td><code>&gt; </code></td>
<td>用&gt;开头跟一个空格，支持多行</td>
</tr>
<tr>
<td>多级引用</td>
<td><code>&gt;</code></td>
<td>还是用&gt;跟一个空格，只需换行加&gt;和空格</td>
</tr>
</tbody></table>
<h2 id="三、推荐"><a href="#三、推荐" class="headerlink" title="三、推荐"></a>三、推荐</h2><p>强烈推荐使用**<em><code>Typora</code>**</em>客户端进行MarkDown编辑，很强大的一款markdown客户端编辑器。</p>
<p><a href="https://typora.io/#windows">Typora官网</a></p>
<h2 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h2><p><a href="https://commonmark.org/">CommonMark</a></p>
<p><a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin">Markdown百科</a>  </p>
<p><a href="https://docs.github.com/cn/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax">GitHub官方MarkDown语法链接</a>  </p>
<p><a href="https://github.github.com/gfm/">GFM</a>  </p>
<p><a href="https://daringfireball.net/projects/markdown/syntax#backslash">Daring Fireball</a></p>
<p><a href="https://www.jianshu.com/p/40ba812dd973">github markdown语法大全整理</a></p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Markdown</tag>
        <tag>语法</tag>
      </tags>
  </entry>
</search>
